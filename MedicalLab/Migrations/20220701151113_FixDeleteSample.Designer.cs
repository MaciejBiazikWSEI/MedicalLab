// <auto-generated />
using System;
using MedicalLab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalLab.Migrations
{
    [DbContext(typeof(MedicalLabContext))]
    [Migration("20220701151113_FixDeleteSample")]
    partial class FixDeleteSample
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalLab.Models.Patient", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code")
                        .HasName("PK__Patients__A25C5AA63D960BA2");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalLab.Models.Sample", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientCode")
                        .HasColumnType("int");

                    b.HasKey("Code")
                        .HasName("PK__Samples__A25C5AA6AFC9BB1D");

                    b.HasIndex("PatientCode");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("MedicalLab.Models.Test", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("date");

                    b.Property<int>("SampleCode")
                        .HasColumnType("int");

                    b.Property<int>("TesterId")
                        .HasColumnType("int");

                    b.HasKey("Code")
                        .HasName("PK__Tests__A25C5AA605BCDABF");

                    b.HasIndex("SampleCode");

                    b.HasIndex("TesterId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("MedicalLab.Models.Tester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("MedicalLab.Models.Sample", b =>
                {
                    b.HasOne("MedicalLab.Models.Patient", "PatientCodeNavigation")
                        .WithMany("Samples")
                        .HasForeignKey("PatientCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Samples__Patient__30F848ED");

                    b.Navigation("PatientCodeNavigation");
                });

            modelBuilder.Entity("MedicalLab.Models.Test", b =>
                {
                    b.HasOne("MedicalLab.Models.Sample", "SampleCodeNavigation")
                        .WithMany("Tests")
                        .HasForeignKey("SampleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Tests__SampleCod__34C8D9D1");

                    b.HasOne("MedicalLab.Models.Tester", "Tester")
                        .WithMany("Tests")
                        .HasForeignKey("TesterId")
                        .IsRequired()
                        .HasConstraintName("FK__Tests__TesterId__35BCFE0A");

                    b.Navigation("SampleCodeNavigation");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("MedicalLab.Models.Patient", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("MedicalLab.Models.Sample", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("MedicalLab.Models.Tester", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
